{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n/**\n * load_environment_variables_from_file does exactly what its name suggests\n * attempts to load a file containing a list of enviroment variables\n * @param {String} filepath - the path to your env.json or .env file\n * try/catch has a nice stack trace if we fail to find/load your the file\n */\n\n\nmodule.exports = function load_environment_variables_from_file(filepath) {\n  try {\n    // first we determine how to find the env.json or config.env file\n    var module_callee = module.parent.id;\n    var called_by_module = module_callee.indexOf('node_modules');\n    var parent_directory = module_callee.slice(0, called_by_module);\n\n    if (filepath) {\n      // if required without a config.env file we search for one!\n      if (called_by_module > -1) {\n        filepath = path.resolve(parent_directory, filepath);\n      } else {\n        filepath = path.resolve(filepath);\n      }\n    } else {\n      // https://github.com/dwyl/env2/issues/6\n      var dir = fs.readdirSync(parent_directory); // list of files in dir\n\n      dir.forEach(function (file) {\n        // search for a .env file in dir\n        if (file.indexOf('.env') > -1) {\n          // found a .env file? use it!\n          filepath = parent_directory + file;\n        }\n      });\n    }\n\n    var env_getter = filepath.indexOf('.env') !== -1 ? get_dot_env : get_JSON;\n    var env = env_getter(filepath);\n    Object.keys(env).forEach(function (k) {\n      if (!process.env[k]) {\n        // allow enviroment to take precedence over env.json\n        process.env[k] = env[k]; // only set if not set by environment\n      }\n    });\n  } catch (error) {\n    var is_enoent = error.message && error.message.indexOf('ENOENT') !== -1;\n    var message_detail = is_enoent ? ' NOT FOUND! ' : ' INVALID JSON! '; // we're defining our own styles to avoid dependencies.\n    // if you are curious how this works see: github.com/chalk/ansi-styles\n\n    var reset = \"\\x1B[22m\";\n    var bold = \"\\x1B[1m\";\n    var cyanBg = \"\\x1B[46m\" + \"\\x1B[30m\"; // Background Cyan Font Black\n\n    var greenBg = \"\\x1B[42m\" + \"\\x1B[30m\"; // Background Green Font Black\n\n    var warning = \"\\x1B[43m\" + \"\\x1B[30m\"; // Background Green Font Black\n\n    var endStyle = \"\\x1B[49m\" + \"\\x1B[39m\" + \"\\x1B[22m\"; // reset terminal\n\n    var msg = bold + warning + ' WARNING: ' + reset;\n    msg += greenBg + ' env2 was required to load an .env file: ';\n    msg += cyanBg + ' ' + filepath + ' ' + bold + warning + message_detail;\n    msg += reset + greenBg + ' ';\n    msg += 'Please see: http://git.io/vG3UZ' + endStyle;\n    console.warn(msg);\n    return msg;\n  }\n};\n\nfunction get_dot_env(filepath) {\n  return make_json_from_dot(fs.readFileSync(path.resolve(filepath), 'utf8'));\n}\n\nfunction make_json_from_dot(dot_env) {\n  return dot_env.split('\\n').map(trim).filter(function (line) {\n    return line.length;\n  }).filter(isNotComment).reduce(add_dot_env_line_to_json, {});\n}\n\nfunction trim(string) {\n  return string.trim();\n}\n\nfunction isNotComment(line) {\n  return line[0] !== '#';\n}\n\nfunction get_JSON(path) {\n  return JSON.parse(fs.readFileSync(path));\n}\n\nfunction add_dot_env_line_to_json(json, env_variable) {\n  var environment_parts = env_variable.replace('export', '').split('=');\n  json[environment_parts[0].trim()] = environment_parts.slice(1).join('=').trim();\n  return json;\n}\n\nexports.version = require('../package.json').version;","map":null,"metadata":{},"sourceType":"script"}